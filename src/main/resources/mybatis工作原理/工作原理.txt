Mybatis工作原理
    先封装sql，接着调用JDBC操作数据库，最后把数据库返回的表结果封装成java类。

    SqlSession
        包含了所有执行语句、提交或回滚事务以及获取映射器实例的方法。
        SqlSession是Mybatis提供的面向用户的API，表示和数据库交互时的会话对象，用于完成数据的增删改查功能。
        SqlSession是Executor组件的外观，目的是对外提供易于理解和使用的数据库操作接口。

    Executor(可扩展插件)
        Executor是MyBatis的SQL执行器，MyBatis中对数据所有的增删改查操作都是由Executor组件完成的。

    StatementHandler（可扩展插件）
        StatementHandler组件封装了对JDBC Statement的操作，例如设置Statement对象的fetchSize属性、设置查询超时时间、
            调用JDBC Statement与数据库交互等。
        SimpleStatementHandler ：封装了JDBC的 Statement 对象
        PreparedStatementHandler：封装了JDBC的 PreparedStatement 对象 （可添加sql参数）
        CallableStatementHandler：封装了JDBC的 CallableStatement 对象

    ParameterHandler（可扩展插件）
        当MyBatis框架使用的Statement类型为CallableStatement和PreparedStatement时，ParameterHandler用于为Statement对象参数占位符设置值。

    ResultSetHandler（可扩展插件）
        ResultSetHandler封装了对JDBC中的ResultSet对象操作，当执行SQL类型为SELECT语句时，ResultSetHandler用于将查询结果转换成Java对象。

    TypeHandler（自定义转化处理器）
        处理JDBC类型与Java类型之间的转换

    Configuration
        用于描述MyBatis的主配置信息，其他组件需要获取配置信息时，直接通过Configuration对象获取。除此之外，MyBatis在应用启动时，
            将Mapper配置信息、类型别名、TypeHandler等注册到Configuration组件中，其他组件需要这些信息时，也可以从Configuration对象中获取。

    MappedStatement
        MappedStatement用于描述Mapper中的SQL配置信息，是对Mapper XML配置文件中<select|update|delete|insert>等标签
            或者@Select/@Update等注解配置信息的封装。


    #{}和${}参数占位符
        使用#{}参数占位符时，占位符内容会被替换成 "?"，然后通过PreparedStatement对象的setXXX()方法为参数占位符设置值；而${}参数占位符内容会被直接替换为参数值。
        使用#{}参数占位符能够有效避免SQL注入问题，所以我们可以优先考虑使用#{}占位符，当#{}参数占位符无法满足需求时，才考虑使用${}参数占位符。
        使用#{}可以有效的防止SQL注入，提高系统安全性。原因在于：预编译机制。预编译完成之后，SQL的结构已经固定，即便用户输入非法参数，
            也不会对SQL的结构产生影响，从而避免了潜在的安全风险。
        预编译是提前对SQL语句进行预编译，而其后注入的参数将不会再进行SQL编译。我们知道，SQL注入是发生在编译的过程中，
            因为恶意注入了某些特殊字符，最后被编译成了恶意的执行操作。而预编译机制则可以很好的防止SQL注入。

    Mapper
        MyBatis中Mapper的配置分为两部分，分别为Mapper接口和Mapper SQL配置。MyBatis通过动态代理的方式创建Mapper接口的代理对象，
            MapperProxy类中定义了Mapper方法执行时的拦截逻辑，通过MapperProxyFactory创建代理实例，MyBatis启动时，
            会将MapperProxyFactory注册到Configuration对象中。另外，MyBatis通过MappedStatement类描述Mapper SQL配置信息，框架启动时，
            会解析Mapper SQL配置，将所有的MappedStatement对象注册到Configuration对象中。
        通过Mapper代理对象调用Mapper接口中定义的方法时，会执行MapperProxy类中的拦截逻辑，将Mapper方法的调用转换为调用SqlSession提供的API方法。
            在SqlSession的API方法中通过Mapper的Id找到对应的MappedStatement对象，获取对应的SQL信息，
            通过StatementHandler操作JDBC的Statement对象完成与数据库的交互，然后通过ResultSetHandler处理结果集，将结果返回给调用者。


    几种扩展的执行顺序
        Executor ------> Start    sql:[select  * from  `order` where  sub_size = ? and amount = ?]
        ParameterHandler  ------>   select  * from  `order` where  sub_size = ** NOT SPECIFIED ** and amount = ** NOT SPECIFIED **
        StatementHandler Init ------>   query
        TypeHandler getResult Before ------>   {}
        ResultSetHandler  ------>   [{"amount":333,"data":"{}","gmtCreate":1639716832000,"id":2,"jsonData":{},"subSize":333}]
        StatementHandler Before ------>   [{"amount":333,"data":"{}","gmtCreate":1639716832000,"id":2,"jsonData":{},"subSize":333}]
        StatementHandler After  ------>   [{"amount":333,"data":"{\"StatementHandler\":\"Live\"}","gmtCreate":1639716832000,"id":2,"jsonData":{"StatementHandler":"Live"},"subSize":333}]
        Executor ------>  END  [{"amount":333,"data":"{\"StatementHandler\":\"Live\"}","gmtCreate":1639716832000,"id":2,"jsonData":{"StatementHandler":"Live"},"subSize":333}]


    MyBatis缓存
        一级缓存
            一级缓存是默认开启的，而且不能关闭
            一级缓存级别(localCacheScope)
                SESSION     缓存对整个SqlSession有效，只有执行DML语句（更新语句）时，缓存才会被清除
                STATEMENT   缓存仅对当前执行的语句有效，当语句执行完毕后，缓存就会被清空

        二级缓存
            默认二级缓存关闭
                作用域为 Namespaces，当Namespaces内执行查询操作时，查询结果会被缓存到二级缓存中，执行更新操作后，二级缓存会被清空

        第三方缓存
            支持使用第三方作为缓存



    Mapper代理的执行
        请求Mapper接口 -> 被代理后的OrderMapper -> MapperProxy -> @invoke -> cachedInvoker -> MapperMethod -> @execute -> 根据操作类型执行
